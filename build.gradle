/**
 * Gradle build config for GWT sdk
 *
 * @author lyhcode
 */

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'jetty'

// GWT Settings
def gwtVersion = '2.5.1'                // GWT SDK version
def gwtModule = 'com.example.MyGWTApp'  // GWT module name
def gwtStartupUrl = 'MyGWTApp.html'     // Startup URL for Dev Mode
def gwtWarPath = 'war'                  // WebContent directory

def gwtServerHost = 'localhost'
def gwtServerPort = 8888

//targetCompatibility = 1.6
//sourceCompatibility = 1.6

group = 'example'
version = '1.0'

sourceSets.main.java.srcDirs = ['src']

// Jetty Web Container
//jettyRun.daemon = true                              // Specifies whether the Jetty server should run in the background.
jettyRun.contextPath = ''                           // The context path to use to deploy the web application.
jettyRun.webAppSourceDirectory = file(gwtWarPath)   // The directory containing the web application source files.
jettyRun.httpPort = gwtServerPort                   // The TCP port for Jetty to listen on for incoming HTTP requests.
jettyRun.scanIntervalSeconds = 5                    // The interval in seconds between scanning the web app for file changes.

// Package War
war {
    from gwtWarPath
}

repositories {
    mavenCentral()
}

dependencies {
    // Compile GWT libs, needed for gwtCompile and the javaCompile
    // Also includes the servlet-api
    providedCompile "com.google.gwt:gwt-user:${gwtVersion}"
    providedCompile "com.google.gwt:gwt-dev:${gwtVersion}"

    // Needed for GWT compile and at runtime for RequestBuilder
    // Specify two artifacts as workaround for GRADLE-1934
    compile('javax.validation:validation-api:1.0.0.GA') {
        artifact {
            name = 'validation-api'
            type = 'jar'
        }
        artifact {
            name = 'validation-api'
            type = 'jar'
            classifier = 'sources'
        }
    }
}

task gwtc (dependsOn: classes, type: JavaExec) {

    description = "GWT compile to JavaScript (production mode)"
 
    main = 'com.google.gwt.dev.Compiler'
 
    classpath {[
        sourceSets.main.java.srcDirs,
        configurations.compile
    ]}

    args = [
        gwtModule,
        '-war', gwtWarPath
    ]
 
    maxHeapSize = '256M'
}

task devmode (dependsOn: classes, type: JavaExec) {

    description = "Run development mode"
 
    main = 'com.google.gwt.dev.DevMode'
 
    classpath {[
        sourceSets.main.java.srcDirs,           // Java source
        sourceSets.main.output.resourcesDir,    // Generated resources
        sourceSets.main.output.classesDir,      // Generated classes
        sourceSets.main.compileClasspath,       // Deps
        configurations.compile
    ]}
 
    args = [
        gwtModule,
        '-startupUrl', "http://${gwtServerHost}:${gwtServerPort}/${gwtStartupUrl}",
        '-war', gwtWarPath
    ]
 
    maxHeapSize = '256M'
}

/**
 * Find GWT Modules
 * @param searchDir
 * @param entryPointOnly
 */
def findModules(String searchDir, boolean entryPointOnly) {
    def modules = []
    def baseLength = searchDir.size()

    def searchDirFile = new File(searchDir)
    if (searchDirFile.exists()) {
        searchDirFile.eachFileRecurse { File file ->
            // Replace Windows separators with Unix ones.
            def filePath = file.path.replace('\\' as char, '/' as char)

            // Chop off the search directory.
            filePath = filePath.substring(baseLength + 1)

            // Now check whether this path matches a module file.
            def m = filePath =~ /([\w\/]+)\.gwt\.xml$/
            if (m.count > 0) {
                // now check if this module has an entry point
                // if there's no entry point, then it's not necessary to compile the module
                if (!entryPointOnly || file.text =~ /entry-point/) {
                    // Extract the fully-qualified module name.
                    modules << m[0][1].replace('/' as char, '.' as char)
                }
            }
        }
    }

    return modules
}
